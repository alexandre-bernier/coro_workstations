<!--
Brief:	Launch file to start a simulated workstation.
Author: Alexandre Bernier
Date:	2021-04-29
Email:	alexandre.bernier.3@ens.etsmtl.ca
Note: Taken from ur5_ros_control.launch in ur_modern_driver.
      Velocity-based controller gives a much smoother robot mouvement than the position-based controller.
-->
<launch>
	<!-- GDB functionality -->
	<arg name="debug" default="false"/>
	<arg unless="$(arg debug)" name="launch_prefix" value=""/>
	<arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args"/>
	
	<!-- ************* -->
	<!-- Load UR robot -->
	<!-- ************* -->
	<arg name="robot_ip" doc="IP of the controller"/>
	<arg name="reverse_ip" default="" doc="IP of the computer running the driver"/>
	<arg name="reverse_port" default="50001"/>
	<arg name="min_payload"  default="0.0"/>
	<arg name="max_payload"  default="5.0"/>
	<arg name="prefix" default=""/>
	<arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->
	<arg name="base_frame" default="$(arg prefix)base"/>
	<arg name="tool_frame" default="$(arg prefix)tool0_controller"/>
	<arg name="shutdown_on_disconnect" default="true"/>
	<arg name="controllers" default="joint_state_controller force_torque_sensor_controller vel_based_pos_traj_controller"/>
	<arg name="stopped_controllers" default="pos_based_pos_traj_controller joint_group_vel_controller"/>
	
	<!-- Robot model -->
	<param name="robot_description" command="$(find xacro)/xacro '$(find coro_descriptions)/urdf/workstations/ur5_workstation.urdf.xacro'"/>

	<!-- Load hardware interface -->
	<node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="log" launch-prefix="$(arg launch_prefix)">
		<param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
		<param name="reverse_ip_address" type="str" value="$(arg reverse_ip)"/>
		<param name="reverse_port" type="int" value="$(arg reverse_port)"/>
		<param name="min_payload" type="double" value="$(arg min_payload)"/>
		<param name="max_payload" type="double" value="$(arg max_payload)"/>
		<param name="max_velocity" type="double" value="$(arg max_velocity)"/>
		<param name="use_ros_control" type="bool" value="True"/>
		<param name="servoj_gain" type="double" value="750"/>
		<!--<param name="servoj_lookahead_time" type="double" value="2"/>-->
		<param name="prefix" value="$(arg prefix)"/>
		<param name="base_frame" type="str" value="$(arg base_frame)"/>
		<param name="tool_frame" type="str" value="$(arg tool_frame)"/>
		<param name="shutdown_on_disconnect" type="bool" value="$(arg shutdown_on_disconnect)"/>
	</node>

	<!-- Load controller settings -->
	<rosparam file="$(find ur_modern_driver)/config/ur5_controllers.yaml" command="load"/>

	<!-- spawn controller manager -->
	<node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"	output="screen" args="$(arg controllers)"/>

	<!-- load other controller -->
	<node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load $(arg stopped_controllers)"/>
		
	<!-- ******************** -->
	<!-- Load Robotiq gripper -->
	<!-- ******************** -->
	<arg name="comport" default="/dev/ttyUSB0"/>
    <arg name="baud" default="115200"/>
	        
    <!-- Robotiq 85 ROS Driver -->
    <node pkg="robotiq_85_driver" type="robotiq_85_driver" name="robotiq_85_driver" respawn="true" output="screen">
        <param name="num_grippers" value="1"/>
        <param name="comport" value="$(arg comport)" />
        <param name="baud" value="$(arg baud)" />
    </node>
    
    <!-- ******************************** -->
	<!-- Load Robotiq force-torque sensor -->
	<!-- ******************************** -->
	<node pkg="robotiq_ft_sensor" type="rq_sensor" name="rq_sensor" respawn="true" output="screen">
		<param name="serial_id" value="ttyUSB1"/>
	</node>

	<!-- *************************** -->
	<!-- Start Robot_State_Publisher -->
	<!-- *************************** -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="robot_description" value="robot_description"/>
	</node>
	
	<!-- ******************* -->
  	<!-- Then, launch Moveit -->
  	<!-- ******************* -->
  	<!-- Run the main MoveIt executable --> 
  	<include file="$(find ur5_hw_workstation_moveit_config)/launch/move_group.launch">
  		<arg name="publish_monitored_planning_scene" value="true"/>
		<arg name="allow_trajectory_execution" value="true"/>
		<arg name="fake_execution" value="false"/>
		<arg name="pipeline" value="ompl"/>
		<arg name="load_robot_description" value="true"/>
		<arg name="info" value="true"/>
		<arg name="debug" default="$(arg debug)"/>
  	</include>
  	
  	<!-- ******** -->
  	<!-- And Rviz -->
  	<!-- ******** -->
  	<!-- Run Rviz and load the default config to see the state of the move_group node -->
  	<include file="$(find ur5_hw_workstation_moveit_config)/launch/moveit_rviz.launch">
  		<arg name="rviz_config" default="$(find ur5_hw_workstation_moveit_config)/launch/moveit.rviz"/>
		<arg name="debug" value="$(arg debug)"/>
	</include>
</launch>
